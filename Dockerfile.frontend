# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Install dependencies
COPY package*.json ./
RUN npm install

# Copy source files
COPY . .

# Build the application with debugging
RUN echo "Starting build process..." && \
    ls -la && \
    npm run build && \
    echo "Build complete. Contents of dist:" && \
    ls -la dist/

# Production stage
FROM nginx:alpine

# Remove default nginx static assets
RUN rm -rf /usr/share/nginx/html/*

# Copy built assets from build stage
COPY --from=build /app/dist/ /usr/share/nginx/html/

# Copy public assets
COPY --from=build /app/public/ /usr/share/nginx/html/

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create nginx main configuration
RUN cat > /etc/nginx/nginx.conf << 'EOL'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    include /etc/nginx/conf.d/*.conf;
}
EOL

# Debug: List contents and permissions
RUN echo "Contents of nginx html directory:" && \
    ls -la /usr/share/nginx/html/ && \
    echo "Nginx configuration:" && \
    cat /etc/nginx/nginx.conf && \
    cat /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Create a basic health check page
RUN echo "OK" > /usr/share/nginx/html/health.html

EXPOSE 80

# Start nginx with debug output
CMD ["nginx", "-g", "daemon off;"] 