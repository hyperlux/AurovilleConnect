# Build stage
FROM node:18-alpine as build

WORKDIR /app

# Increase Node memory limit and use production mode
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV NODE_ENV=production

# Install dependencies
COPY package*.json ./
RUN npm ci --only=production

# Copy source files
COPY . .

# Build with production optimizations
RUN echo "Starting build process..." && \
    export VITE_BUILD_MEMORY_LIMIT=1024 && \
    npm run build -- --mode production && \
    echo "Build complete. Contents of dist:" && \
    ls -la dist/

# Production stage
FROM nginx:alpine

# Remove default nginx static assets
RUN rm -rf /usr/share/nginx/html/*

# Copy built assets from build stage
COPY --from=build /app/dist/ /usr/share/nginx/html/

# Copy public assets
COPY --from=build /app/public/ /usr/share/nginx/html/

# Copy our custom server configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Create a basic health check page
RUN echo "OK" > /usr/share/nginx/html/health.html

EXPOSE 80

# Start nginx with debug output
CMD ["nginx", "-g", "daemon off;"] 