server {
    listen 80;
    listen [::]:80;
    server_name auroville.social;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;
    server_name auroville.social;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/auroville.social/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/auroville.social/privkey.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Enable debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log combined;

    # HSTS (uncomment if you're sure)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Serve static files from the dist directory
    root /usr/share/nginx/html/dist;
    index index.html;

    # Set MIME types
    types {
        text/html html htm;
        application/javascript js mjs;
        text/javascript ts tsx;
        text/css css;
        image/png png;
        image/jpeg jpg jpeg;
        image/gif gif;
        image/x-icon ico;
        image/svg+xml svg;
        font/woff woff;
        font/woff2 woff2;
        font/ttf ttf;
        application/vnd.ms-fontobject eot;
        application/typescript ts;
        application/x-typescript tsx;
    }

    # Handle SPA routing
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-store no-cache must-revalidate proxy-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        default_type text/html;
    }

    location = /index.html {
        add_header Cache-Control "no-store no-cache must-revalidate proxy-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }

    # Service worker configuration
    location = /service-worker.js {
        alias /usr/share/nginx/html/dist/service-worker.js;
        add_header Cache-Control "public, max-age=0, must-revalidate";
        add_header Service-Worker-Allowed "/";
        default_type application/javascript;
    }

    # Static files caching
    location /assets/ {
        alias /usr/share/nginx/html/dist/assets/;
        expires 1y;
        add_header Cache-Control "public no-transform";
        try_files $uri /assets/index.html =404;
    }

    location ~* \.(js|mjs|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|ts|tsx)$ {
        expires 1y;
        add_header Cache-Control "public no-transform";
        try_files $uri =404;
    }

    # Proxy API requests to the backend
    location /api/ {
        proxy_pass http://auroville_app:5000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 300;
        proxy_connect_timeout 300;

        # CORS headers
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET POST PUT DELETE OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization Content-Type' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET POST PUT DELETE OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}
